<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.ItemsMapper">




	<select id="load" resultMap="itemWithCategoryList">
		SELECT
		i.item_id as i_item_id
		,i.name
		as i_name
		,i.condition as i_condition
		,i.category_id as i_category_id
		,i.price as i_price
		,i.shipping as i_shipping
		,i.description as
		i_description
		,c.id as c_id
		,c.name as c_name
		,c.level as c_level
		,b.id as
		b_id
		,b.name as b_name
		FROM items as i
		LEFT OUTER JOIN categories AS c
		ON
		i.category_id
		= c.id
		LEFT OUTER JOIN brands AS b
		ON
		i.brand_id = b.id
		WHERE
		item_id =
		#{itemId}
	</select>

	<resultMap type="com.example.domain.Item"
		id="itemWithCategoryList">
		<result property="itemId" column="i_item_id" />
		<result property="name" column="i_name" />
		<result property="condition" column="i_condition" />
		<result property="categoryId" column="i_category_id" />
		<result property="price" column="i_price" />
		<result property="shipping" column="i_shipping" />
		<result property="description" column="i_description" />
		<association property="brand"
			javaType="com.example.domain.Brand">
			<id property="id" column="b_id" />
			<result property="name" column="b_name" />
		</association>
		<collection property="categoryList"
			ofType="com.example.domain.Category">
			<id property="id" column="c_id" />
			<result property="name" column="c_name" />
			<result property="level" column="c_level" />
		</collection>

	</resultMap>

	<select id="countTotalQuantity" resultType="int"
		parameterType="map">
		SELECT
		COUNT(*)
		FROM items
		WHERE
		1 = 1
		<if test="filter.name != null">
			AND
			name ILIKE #{filter.name}
		</if>
		<if test="filter.brand.name != null">
			AND
			EXISTS (
			SELECT 1 FROM brands
			WHERE
			items.brand_id =
			brands.id
			AND
			name ILIKE #{filter.brand.name}
			)
		</if>
		<if
			test="filter.brand.id != @com.example.common.NullValue@BRAND_ID.value">
			AND
			brand_id = #{filter.brand.id}
		</if>
		<if
			test="filter.categoryId != @com.example.common.NullValue@CATEGORY_ID.value">
			AND
			EXISTS (
			SELECT 1
			FROM
			category_tree_paths
			WHERE
			items.category_id
			= category_tree_paths.descendant_id
			AND
			ancestor_id =
			#{filter.categoryId}
			)
		</if>
	</select>

	<select id="findByFilter" resultType="com.example.domain.Item"
		resultMap="itemWithBrand" parameterType="map">
		SELECT
		i.item_id as i_item_id
		,i.name as i_name
		,i.condition as
		i_condition
		,i.category_id as i_category_id
		,i.price as i_price
		,i.shipping as i_shipping
		,i.description as i_description
		,b.id AS b_id
		,b.name AS b_name
		FROM items AS i
		LEFT OUTER JOIN brands AS b
		ON
		i.brand_id = b.id
		WHERE
		1 = 1
		<if test="filter.name != null">
			AND
			i.name ILIKE #{filter.name}
		</if>
		<if test="filter.brand.name != null">
			AND
			EXISTS (
			SELECT 1 FROM brands
			WHERE
			i.brand_id = brands.id
			AND
			name ILIKE #{filter.brand.name}
			)
		</if>
		<if
			test="filter.brand.id != @com.example.common.NullValue@BRAND_ID.value">
			AND
			i.brand_id = #{filter.brand.id}
		</if>
		<if
			test="filter.categoryId != @com.example.common.NullValue@CATEGORY_ID.value">
			AND
			EXISTS (
			SELECT 1
			FROM
			category_tree_paths
			WHERE
			i.category_id =
			category_tree_paths.descendant_id
			AND
			ancestor_id =
			#{filter.categoryId}
			)
		</if>
		ORDER BY i.item_id
		LIMIT 30
		OFFSET #{filter.offset}
	</select>
	<resultMap type="com.example.domain.Item" id="itemWithBrand">
		<result property="itemId" column="i_item_id" />
		<result property="name" column="i_name" />
		<result property="condition" column="i_condition" />
		<result property="categoryId" column="i_category_id" />
		<result property="price" column="i_price" />
		<result property="shipping" column="i_shipping" />
		<result property="description" column="i_description" />
		<association property="brand"
			javaType="com.example.domain.Brand">
			<id property="id" column="b_id" />
			<result property="name" column="b_name" />
		</association>
	</resultMap>




	<insert id="insert" parameterType="map">
		INSERT INTO items
		(item_id,name,condition,category_id,brand_id,price,shipping,description,registered_date_time,registered_name,updated_date_time,updated_name)
		VALUES
		(#{item.itemId},#{item.name},#{item.condition},#{item.categoryId},#{item.brand.id},#{item.price},#{item.shipping},#{item.description},now(),'登録者(ログイン機能実装までの仮)',now(),'更新者(ログイン機能実装までの仮)')
	</insert>

	<update id="updateItem" parameterType="map">
		UPDATE items
		SET
		name =
		#{item.name}
		,condition = #{item.condition}
		,category_id
		=
		#{item.categoryId}
		,brand_id = #{item.brand.id}
		,price = #{item.price}
		,description = #{item.description}
		,updated_date_time = now()
		,updated_name = '更新者(ログイン機能実装までの仮)'
		WHERE
		item_id = #{item.itemId}
	</update>



	<select id="pickUpLatestItemId" resultType="Integer">
		SELECT
		MAX(item_id)
		from items
	</select>
	<select id="createIndexForItemId">
		CREATE UNIQUE INDEX idx_item_id ON items(item_id)
	</select>
	<select id="deleteIndexForItemId">
		DROP INDEX IF EXISTS idx_item_id
	</select>

</mapper>