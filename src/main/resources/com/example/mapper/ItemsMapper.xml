<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.ItemsMapper">




	<select id="load" resultMap="itemWithCategoryList">
		SELECT
		i.item_id
		,i.name
		,i.condition
		,i.category_id
		,i.brand
		,i.price
		,i.shipping
		,i.description
		,c.id
		,c.name
		,c.level
		FROM items as i
		LEFT OUTER JOIN categories as c
		ON
		i.category_id
		= c.id
		WHERE
		item_id =
		#{itemId}
	</select>

	<resultMap type="com.example.domain.Item"
		id="itemWithCategoryList" autoMapping="true">
		<collection property="categoryList"
			ofType="com.example.domain.Category" autoMapping="true">
		</collection>
	</resultMap>

	<select id="countTotalQuantity" resultType="int">
		SELECT
		COUNT(*)
		FROM items
		WHERE
		1 = 1
		<if test="name != null">
			AND
			name ILIKE CONCAT('%', #{name}, '%')
		</if>
		<if test="brand != null">
			AND
			brand ILIKE CONCAT('%', #{brand}, '%')
		</if>
		<if
			test="categoryId != @com.example.common.NullValue@CATEGORY_ID.value">
			AND
			category_id IN (
			SELECT
			descendant_id
			FROM
			category_tree_paths
			WHERE
			ancestor_id = #{categoryId}
			)
		</if>
	</select>

	<select id="findByFilter" resultType="com.example.domain.Item">
		SELECT
		item_id
		,name
		,condition
		,category_id
		,brand
		,price
		,shipping
		,description
		FROM items
		WHERE
		1 = 1
		<if test="name != null">
			AND
			name ILIKE CONCAT('%', #{name}, '%')
		</if>
		<if test="brand != null">
			AND
			brand ILIKE CONCAT('%', #{brand}, '%')
		</if>
		<if
			test="categoryId != @com.example.common.NullValue@CATEGORY_ID.value">
			AND
			category_id IN (
			SELECT
			descendant_id
			FROM
			category_tree_paths
			WHERE
			ancestor_id = #{categoryId}
			)
		</if>
		ORDER BY item_id
		LIMIT 30
		OFFSET #{offset}
	</select>




	<insert id="insert" parameterType="map">
		INSERT INTO items
		(item_id,name,condition,category_id,brand,price,shipping,description,registered_date_time,registered_name,updated_date_time,updated_name)
		VALUES
		(#{item.itemId},#{item.name},#{item.condition},#{item.categoryId},#{item.brand},#{item.price},#{item.shipping},#{item.description},now(),'登録者(ログイン機能実装までの仮)',now(),'更新者(ログイン機能実装までの仮)')
	</insert>

	<update id="updateItem" parameterType="map">
		UPDATE items
		SET
		name =
		#{item.name}
		,condition = #{item.condition}
		,category_id
		=
		#{item.categoryId}
		,brand = #{item.brand}
		,price = #{item.price}
		,description = #{item.description}
		,updated_date_time = now()
		,updated_name = '更新者(ログイン機能実装までの仮)'
		WHERE
		item_id = #{item.itemId}
	</update>



	<select id="pickUpLatestItemId" resultType="Integer">
		SELECT
		MAX(item_id)
		from items
	</select>
	<select id="createIndexForItemId">
		CREATE UNIQUE INDEX idx_item_id ON items(item_id)
	</select>
	<select id="deleteIndexForItemId">
		DROP INDEX IF EXISTS idx_item_id
	</select>

</mapper>